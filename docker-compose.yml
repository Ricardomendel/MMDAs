version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: revenue_system_db
    environment:
      POSTGRES_DB: revenue_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/src/database/init:/docker-entrypoint-initdb.d
    networks:
      - revenue_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: revenue_system_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - revenue_network
    restart: unless-stopped

  # Backend API Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: revenue_system_server
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: revenue_system
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      CLIENT_URL: http://localhost:3000
    ports:
      - "5000:5000"
    volumes:
      - ./server:/app
      - /app/node_modules
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - revenue_network
    restart: unless-stopped
    command: npm start

  # Frontend React App
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: development
    container_name: revenue_system_client
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      REACT_APP_SOCKET_URL: http://localhost:5000
      REACT_APP_ENVIRONMENT: development
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - server
    networks:
      - revenue_network
    restart: unless-stopped
    command: npm start

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: revenue_system_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./client/build:/usr/share/nginx/html
    depends_on:
      - server
      - client
    networks:
      - revenue_network
    restart: unless-stopped
    profiles:
      - production

  # Adminer (Database Management)
  adminer:
    image: adminer:latest
    container_name: revenue_system_adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - revenue_network
    restart: unless-stopped

  # Redis Commander (Redis Management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: revenue_system_redis_commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - revenue_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  revenue_network:
    driver: bridge
